/// <summary>
///   Authors: Samuel Hancock, Hyrum Schenk
///   
///   We, Hyrum Schenk and Samuel Hancock, certify that I wrote this code from scratch and did not copy it in part or whole from  
///   another source.  All references used in the completion of the assignment are cited in my README file.
///   
/// File Contents
/// <para>
///     This GUI provides a way to interact with the 
///     Spreadsheet class; to enter values to cells, evalute
///     formulas based on values in cells and view the contents and values of cells.
///   </para>
/// 
/// </summary>

using SpreadsheetGrid_Core;
using System;
using System.Drawing;
using System.Windows.Forms;
using SS;
using SpreadsheetUtilities;
using System.Threading;
using System.ComponentModel;
using System.Collections.Generic;



namespace SpreadsheetGUI
{
    public partial class SimpleSpreadsheetGUI : Form
    {
        private AbstractSpreadsheet SpreadData;

        public SimpleSpreadsheetGUI()
        {
            this.grid_widget = new SpreadsheetGridWidget();
            SpreadData = new Spreadsheet(s => ValidatorFunction(s), s => NormalizingFunction(s) , "six");
            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += CellClick;
            grid_widget.SetSelection(0, 0, false);
            nameTextbox.Text = "A1";
        }

        

        /// <summary>
        /// Given a spreadsheet, find the current selected cell and
        /// create a popup that contains the information from that cell
        /// </summary>
        /// <param name="ss"></param>
        private void CellClick(SpreadsheetGridWidget ss)
        {
            int row, col;

            //Geting cell value
            string value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
            valueTextbox.Text = value;

            //Getting cell name
            row = row + 1;
            string sRow = row.ToString();
            col = col + 65;
            string sCol = ((char)col).ToString();
            nameTextbox.Text = sCol + sRow;

            //Getting cell contents and formula textboxes
            object contents = SpreadData.GetCellContents(nameTextbox.Text);
            if (contents is Formula)
            {
                string formula = contents.ToString();
                formula = formula.Insert(0, "=");
                contentsTextbox.Text = formula;
            }
            else
                contentsTextbox.Text = contents.ToString();

            formulaTextbox.Text = contentsTextbox.Text;
            formulaTextbox.Focus();

            //Place cursor at end of formula bar
            //formulaTextbox.Focus();
            //formulaTextbox.SelectionStart = formulaTextbox.Text.Length;
        }

        /// <summary>
        /// Cell names that are entered are automatically modified from lowercase to uppercase
        /// </summary>
        /// <param name="CellName"></param>
        /// <returns></returns>
        private string NormalizingFunction(string CellName)
        {
            return CellName.Trim().ToUpper();
        }

        /// <summary>
        /// Checks if the entered variable name is valid or not (only letters and numbers
        /// are accepted
        /// </summary>
        /// <param name="CellName"></param>
        /// <returns></returns>
        private bool ValidatorFunction(string CellName)
        {
            return char.IsLetter(CellName[0]) && char.IsDigit(CellName[^1]);
        }

        /// <summary>
        ///  Tell the application context to run the form on the same
        ///  thread as the other forms.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Spreadsheet_Window.getAppContext().RunForm(new SimpleSpreadsheetGUI());
        }

        /// <summary>
        /// Closes the current spreadsheet window. If this window was the last spreadsheet open, close
        /// the program.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SafetyFeature(sender, e);
            Close();
        }

        /// <summary>
        /// If an arrow key is pressed, shift the cell selection one cell in that direction
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"> The specified arrow key </param>
        protected void grid_widget_KeyDown(object sender, KeyEventArgs e)
        {
            int col, row;
            grid_widget.GetSelection(out col, out row);

            if (e.KeyData == Keys.Left && col > 0)
            {
                grid_widget.SetSelection(col - 1, row, false);
                CellClick(grid_widget);
            }
            else if (e.KeyData == Keys.Right && col < 25)
            {
                grid_widget.SetSelection(col + 1, row, false);
                CellClick(grid_widget);
            }
            else if (e.KeyData == Keys.Up && row > 0)
            {
                grid_widget.SetSelection(col, row - 1, false);
                CellClick(grid_widget);
            }
            else if (e.KeyData == Keys.Down && row < 98)
            {
                grid_widget.SetSelection(col, row + 1, false);
                CellClick(grid_widget);
            }
        }

        /// <summary>
        /// When the user modifies the Formula textbox, the contents textbox is modified to match
        /// the formula textbox in real time.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void formulaTextbox_TextChanged(object sender, EventArgs e)
        {
            //Keep contents from being updated until 'Enter' is pressed
            //contentsTextbox.Text = formulaTextbox.Text;
        }

        /// <summary>
        /// When the enter key is pressed after finishing entering a formula, the background worker
        /// starts evaluating the entered text.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void formulaTextbox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {                
                if (bg_worker.IsBusy == true)
                {
                    MessageBox.Show("Still Calculating Formula");
                    return;
                }
                try
                {
                    bg_worker.RunWorkerAsync();
                    bgProgressBar.MarqueeAnimationSpeed = 50;
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message);
                }
                bgProgressBar.MarqueeAnimationSpeed = 0;
            }
        }

        /// <summary>
        /// This funciton is handled by the background worker. Depending on the input, the evaluator
        /// will send out wither a string, double, or FormulaError object. If an exception would be thrown,
        /// the value is null.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void EvaluateCell(object sender, DoWorkEventArgs e)
        {
            //Calculating cell
            string cell = nameTextbox.Text;
            string contents = formulaTextbox.Text; //used to be contentsTextbox.Text
            try
            {
                SpreadData.SetContentsOfCell(cell, contents);
                object value = SpreadData.GetCellValue(cell);
                if (value.GetType() == typeof(string) || value is double)
                    e.Result = value.ToString();
                else
                    e.Result = "FormulaError";            
            }
            catch(CircularException exception)
            {
                SpreadData.SetContentsOfCell(cell, "");
                MessageBox.Show(exception.Message);
                return;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
                return;
            }
        }

        /// <summary>
        /// When the EvaluateCell funciton is done running, this funciton displays the result in the selected
        /// textbox. If the result from the EvaluateCell funciton is null, the selected cell remains unmodified.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void compute_done(object sender, RunWorkerCompletedEventArgs e)
        {
            int col, row;
            grid_widget.GetSelection(out col, out row);

            //Check if result is null, in case exception/invalid formula was thrown
            if (e.Result != null)
            {
                //Display value in cell
                grid_widget.SetValue(col, row, e.Result.ToString());

                //Evaluate cells dependent on modified cell
                string cell = nameTextbox.Text;
                string contents = formulaTextbox.Text;  //Used to be contentsTextbox.Text
                IList<string> dependents = SpreadData.SetContentsOfCell(cell, contents);
                foreach (string child in dependents)
                {
                    if (child == cell)
                        continue;
                    grid_widget.SetValue(GetCol(child[0]), int.Parse(child.Substring(1)) - 1, SpreadData.GetCellValue(child).ToString());
                }
            }
            else
            {
                formulaTextbox.Focus();
                CellClick(grid_widget);
                return;
            }
            grid_widget.SetSelection(col, row + 1, false);
            CellClick(grid_widget);
        }

        /// <summary>
        /// If the background thread is running, this notifies the progress bar to start cycling.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void compute_progress(object sender, ProgressChangedEventArgs e)
        {
            bgProgressBar.MarqueeAnimationSpeed = 50;
        }

        //ADDITIONAL FEATURE CREATED HERE
        /// <summary>
        /// When the Dependent button in the GUI is clicked, the dependents of the selected cell are displayed
        /// in a message box. If the cell is a formula with no variables or the cell didn't contain a formula
        /// to begin with, a modified message box with appropriate informaiton is displayed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void getDependeesButton_Click(object sender, EventArgs e)
        {
            object contents = SpreadData.GetCellContents(nameTextbox.Text);
            if (contents is Formula)
            {
                Formula formula = (Formula)contents;
                IEnumerable<string> variables = formula.GetVariables();
                string allVariables = "";
                foreach (string variable in variables)
                {
                    allVariables = allVariables + variable.Insert(0, " ");
                }

                if (allVariables != "")
                    MessageBox.Show(allVariables, $"{nameTextbox.Text} relies on the following cells:");
                else
                    MessageBox.Show(nameTextbox.Text + " has no cells to depend on");
            }
            else
                MessageBox.Show(nameTextbox.Text + " is not a formula");
        }

        /// <summary>
        /// <para>
        ///     An event handler to write from a file into the spreadsheet gui.
        /// </para>
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        internal void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SafetyFeature(sender, e);

            using(OpenFileDialog openFile = new OpenFileDialog())
            {
                openFile.Filter = "Spreadsheet Files(*.sprd)|*.sprd| All Files(*.*)|*.*";
                if(openFile.ShowDialog() == DialogResult.OK)
                {
                    grid_widget.Clear();
                    OpenFromFile(openFile.FileName);
                }
            }
            
        }

        /// <summary>
        /// <para>
        ///     A way to launch a saveFileDialog from a menu bar button. The default extension is
        ///     ".sprd" and has a safety catch before overwriting a file or creating a new
        ///     file. 
        /// </para>
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveMenuItem_Click(object sender, EventArgs e)
        {
            using(SaveFileDialog saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "Spreadsheet Files (*.sprd)|*.sprd| All Files (*.*)|*.*";
                saveDialog.OverwritePrompt = true;
                saveDialog.CreatePrompt = true;
                saveDialog.DefaultExt = "sprd";
                
                if(saveDialog.ShowDialog() == DialogResult.OK)
                {

                    string filepath = saveDialog.FileName;
                    SpreadData.Save(filepath);
                }

            }

        }

        /// <summary>
        /// Displays instructions on how to use the spreadsheet and its features
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void HelpPageOnClick(object sender, EventArgs e)
        {
            RichTextBox helppage = new RichTextBox();
            helppage.LoadFile("../../../../../Spreadsheet/SPREADSHEET_HELPPAGE.rtf");
            helppage.ReadOnly = true;
            Form showHelp = new Form();
            showHelp.Text = "Help";
            showHelp.Controls.Add(helppage);
            helppage.Dock = DockStyle.Fill;
            showHelp.Size = new Size(720, 940);
            showHelp.Show();
        }

        /// <summary>
        /// <para>
        ///     A event handler to launch a safety feature on form.formclosing
        /// </para>
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SimpleSpreadsheetGUI_FormClosing(object sender, FormClosingEventArgs e)
        {
            SafetyFeature(sender, e);
            
        }

        /// <summary>
        /// <para>  
        ///         A generic safety catch to prevent termination 
        ///         or overwriting on unsaved work.
        /// </para>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SafetyFeature(object sender, EventArgs e)
        {
            if (SpreadData.Changed)
            {
                DialogResult result = MessageBox.Show("Do you want to save your work?", "Unsaved Changes", MessageBoxButtons.YesNo);
                if (result == DialogResult.Yes)
                    saveMenuItem_Click(sender, e);

            }
        }

        /// <summary>
        /// <para>
        ///     writes data to the sreadsheetgui from an existing file
        /// </para>
        /// </summary>
        /// <param name="pathToFile">A string representing the location of the file.</param>
        public void OpenFromFile(string pathToFile)
        {
            this.SpreadData = new Spreadsheet(pathToFile, s => ValidatorFunction(s), s => NormalizingFunction(s), "six");
            foreach (string name in SpreadData.GetNamesOfAllNonemptyCells())
            {
                grid_widget.SetValue(GetCol(name[0]), int.Parse(name.Substring(1)) - 1, SpreadData.GetCellValue(name).ToString());
            }
        }

        /// <summary>
        /// utf reference relative to 'A'
        /// All names are single uppercase letters and will only needs to compare against a specific subset of characters
        /// </summary>
        /// <param name="rowName"></param>
        /// <returns></returns>
        public int GetCol(char rowName)
        {        
            return rowName.CompareTo('A');
        }
    }
}

